#!/bin/sh

# moar-network-setup
#
# Some network related setup that is by far simpler to be done as a separated script.
# rather than doing them in multiple system services and hooking it all together.
#
# Features:
# - firewall
# - bridge interfaces for Virtual Machines networking.
# - support turning ethernet ports into 'switch'.

### Config
vm_bridges='{{ vm_bridges }}'
vm_bridges_network_prefix='{{ vm_bridges_network_prefix }}'

switch_bridge_interface="{{ switch_bridge_interface }}"
switch_bridge_member_interfaces="{{ switch_bridge_member_interfaces }}"
switch_bridge_subnet="{{ switch_bridge_subnet }}"
switch_bridge_ip="{{ switch_bridge_ip }}"

inbound_open_tcp_ports='{{ inbound_open_tcp_ports }}'
inbound_open_udp_ports='{{ inbound_open_udp_ports }}'
inbound_respond_to_ping='{{ inbound_respond_to_ping }}'

outbound_reject_from_users='{{ outbound_reject_from_users }}'
###

set -e

ewarn() {
    echo ">>> [WARN] $*" >&2
}

iptables_both() {
    for ipt in iptables ip6tables; do
        "${ipt}" "$@"
    done
}

if [ "${vm_bridges}" ]; then
    if ! [ -d /sys/module/br_netfilter ]; then
        # br_netfilter is needed to actually limit network within bridges.
        modprobe br_netfilter
    fi

    # Enable the IPv4 forwarwding.
    echo 1 >/proc/sys/net/ipv4/ip_forward
fi

# Do not purge iptables if script was started by OpenRC (system boot)
# as to not damage iptables rules that Docker sets during it's start.
# On boot iptables are 'clean' enough to not purge them.
if ! [ "$(ps -o comm= "${PPID}")" == 'openrc-run.sh' ]; then
    # Purge current rules.
    iptables_both -F
    iptables_both -X
    iptables_both -t nat -F
    iptables_both -t nat -X
    iptables_both -t mangle -F
    iptables_both -t mangle -X
fi

# Default policy, drop incoming, allow outgoing.
iptables_both -P INPUT DROP
iptables_both -P FORWARD DROP
iptables_both -P OUTPUT ACCEPT

# Log the DROP.
iptables -N LOGDROP
iptables -A LOGDROP -j LOG --log-level 4 --log-prefix '[LOG DROP] '
iptables -A LOGDROP -j DROP

# Log the REJECT
iptables -N LOGREJECT
iptables -A LOGREJECT -j LOG --log-level 4 --log-prefix '[LOG REJECT] '
iptables -A LOGREJECT -j REJECT

# Drop junk
iptables -A INPUT -m conntrack --ctstate INVALID -j DROP
iptables -A FORWARD -m conntrack --ctstate INVALID -j DROP
iptables -A OUTPUT -m conntrack --ctstate INVALID -j DROP

# Don't kill already spared connections,
iptables_both -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
iptables_both -A FORWARD -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

# Drop bogus packets
iptables -A INPUT -p tcp -m tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags SYN,RST SYN,RST -j DROP

# Drop excessive RST packets to avoid SMURF attacks, by given the next real data packet in the sequence a better chance to arrive first.
iptables -A INPUT -p tcp -m tcp --tcp-flags RST RST -m limit --limit 2/second --limit-burst 2 -j ACCEPT

# Drop all outgoing traffic from specified users user.
for i in ${outbound_reject_from_users}; do
    if getent passwd "$i" >/dev/null; then
        iptables -A OUTPUT -p tcp -m owner --uid-owner "${i}" -j LOGREJECT
    else
        ewarn "User $i does not exist, skipping entry for said user."
    fi
done

# Allow all transfers on local interface
iptables_both -A INPUT -i lo -j ACCEPT
iptables_both -A OUTPUT -o lo -j ACCEPT

# Respond to ping.
if [ "${inbound_respond_to_ping}" = 'true' ]; then
    iptables -A INPUT -p icmp --icmp-type 8 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
fi

# Accept all ICMP for IPv6.
ip6tables -A INPUT -p ipv6-icmp -j ACCEPT

# Accept DHCPv6 incoming traffic
#ip6tables -A INPUT -d fe80::/64 -p udp -m udp --dport 546 -m state --state NEW -j ACCEPT

# Open configured TCP ports.
for port in ${inbound_open_tcp_ports}; do
    iptables -A INPUT -p tcp --dport "${port}" -j ACCEPT
done

# Open configured UDP ports.
for port in ${inbound_open_udp_ports}; do
    iptables -A INPUT -p udp --dport "${port}" -j ACCEPT
done

# switch-bridge.
if [ "${switch_bridge_interface}" ]; then
    if ! [ -d /sys/class/net/"${switch_bridge_interface}" ]; then
        ip link add "${switch_bridge_interface}" type bridge
        ip link set up dev "${switch_bridge_interface}"
        ip addr add "${switch_bridge_ip}" dev "${switch_bridge_interface}"
    fi

    # Allow all the traffic within particular bridge.
    iptables -A FORWARD -i "${switch_bridge_interface}" -o "${switch_bridge_interface}" -j ACCEPT

    for i in ${switch_bridge_member_interfaces}; do
        ip addr flush dev "${i}"
        ip route flush dev "${i}"

        ip link set up dev "${i}"

        ip link set dev "${i}" master "${switch_bridge_interface}"
    done
fi

# Get vm bridges up.
# and allow them to connect to VMs inside bridges (poor's man switch, in general)
for i in ${vm_bridges}; do
    if ! [ -d /sys/class/net/br-virt${i} ]; then 
        ip link add name br-virt${i} type bridge
        ip link set up dev br-virt${i}
        ip addr add ${vm_bridges_network_prefix}.${i}.1/24 dev br-virt${i}
    fi

    # Allow all the traffic within particular bridged network.
    iptables -A FORWARD -i br-virt${i} -o br-virt${i} -s ${vm_bridges_network_prefix}.${i}.0/24 -d ${vm_bridges_network_prefix}.${i}.0/24 -j ACCEPT
done

# Drop FORWARD to internal subnets, so VMs won't get all cozy 
# with LAN and other bridged networks, unless allowed above.
iptables -A FORWARD -d 10.0.0.0/8 -j LOGREJECT
iptables -A FORWARD -d 172.16.0.0/12 -j LOGREJECT
iptables -A FORWARD -d 192.168.0.0/16 -j LOGREJECT

# Let VMs/hosts on bridges to access any network address that is not denied above.
for i in ${vm_bridges}; do
    iptables -t nat -A POSTROUTING -s ${vm_bridges_network_prefix}.${i}.0/24 ! -d ${vm_bridges_network_prefix}.0.0/16 -j MASQUERADE
    iptables -A FORWARD -i br-virt${i} -s ${vm_bridges_network_prefix}.${i}.0/24 -j ACCEPT
done

# Be verbous when we drop something that was not allowed above already
iptables -A FORWARD -j LOGDROP
